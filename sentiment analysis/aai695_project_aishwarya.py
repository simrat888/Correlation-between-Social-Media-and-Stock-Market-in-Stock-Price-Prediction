# -*- coding: utf-8 -*-
"""AAI695_Project_Aishwarya.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sdv1oenlOrt27EnhDNJkUYxw8WZVseTV

This project works on analyzing the sentiment of the News Data given a dataset of news articles with their headlines for a set of companies. In the following code, I have worked on analyzing the sentiment for companies such as, Apple Inc, Amazon Inc, Bank of America, Best Buy, Citigroup Inc, The Boeing Company
"""

# pip install yahoo_fin

# pip install yfinance

from nltk.sentiment.vader import SentimentIntensityAnalyzer
import nltk
nltk.download('all')
import warnings
warnings.filterwarnings("ignore")

from google.colab import drive
import pandas as pd
import os
import pickle

drive.mount('/content/drive')
path = '/content/drive/MyDrive/Colab Notebooks/news_data/'
folders = os.listdir(path)
dict_files = {}
word_cloud = []

for folder in folders:
    folder_path = os.path.join(path, folder)
    dict_files[folder] = os.listdir(folder_path)

"""**For Apple Inc Ticker**"""

# for Stock Price Estimation and News related to Apple, limiting the company list to two - Apple Inc and Apple Inc_
c_name = ['Apple Inc']
print('\n\nThe news data available for Apple for 30 days, and consolidated by news per company is',len(dict_files['Apple Inc']), 'in number')

# function to read csvs and perform sentiment analysis on its contents, function returns a dataframe appended with the mean sentiment scores for the day with the date
def myread_csv(c_name):
  df_A = pd.DataFrame()
  df = pd.DataFrame()
  
  analyzer = SentimentIntensityAnalyzer()
  file_path = os.path.join(path, c_name)
  iter = 0
  for i in dict_files[c_name]:
    
    csv_path = os.path.join(file_path, i)
    df_temp = pd.read_csv(csv_path, encoding = 'ISO-8859-1',low_memory=False)
    date = i.split('.')[0]
    df_temp["Date"] = date
    df = pd.concat([df, df_temp])
    df['Concat'] = df["Title"] + df["Description"]

    scores = df['Concat'].apply(analyzer.polarity_scores).tolist()
    df_scores = pd.DataFrame(scores)
    if iter==1:
      print("For the following data: \n", df['Concat'])
      print("\nSample values of Polarity Scores: \n",df_scores)
    iter+=1
    mean = round(df_scores['compound'].mean(), 2)
    
    new_row = {'Date': date, 'Mean': mean}
    df_A = df_A.append(new_row, ignore_index=True)
  return df_A

# Sentiment Scores for every day data within the directory - 'Apple Inc'

AAPL_Sentiment_Scores = pd.DataFrame()
for i in c_name:
  AAPL_Sentiment_Scores = AAPL_Sentiment_Scores.append(myread_csv(i))
AAPL_Sentiment_Scores = AAPL_Sentiment_Scores.reset_index(drop=True)
AAPL_Sentiment_Scores.index = AAPL_Sentiment_Scores.index + 1

print('\n\nHere are the Mean Sentiment Polarity Scores for News with respect to Apple\n')
AAPL_Sentiment_Scores

# importing stock price data from yahoo finance
from yahoo_fin import stock_info as si
import yfinance as yf
import pandas as pd
import os
import matplotlib.pyplot as plt
from datetime import date, timedelta, datetime

# taking the start and end dates as per the news data
start_date = min(AAPL_Sentiment_Scores['Date'])
end_date = max(AAPL_Sentiment_Scores['Date'])

# getting the stock price data for Apple
ticker = "AAPL"
stock_data_all = si.get_data(ticker, start_date=start_date, end_date=end_date, interval='1d')

# resetting index
stock_data_all = stock_data_all.reset_index()
stock_data_all.index = stock_data_all.index + 1
stock_data_all

# resetting column names and date format
new_column = {'index':'Date', 'open':'Open','high':'High', 'low':'Low','close':'Close','adjclose':'Adjclose','volume':'Volume','ticker':'Ticker'}
stock_data_all = stock_data_all.rename(columns=new_column)
import datetime
for i in stock_data_all['Date']:
  date_obj = i
  date_str = date_obj.strftime('%Y-%m-%d')
  stock_data_all['Date'] = date_str

for i in AAPL_Sentiment_Scores['Date']:
  for j in stock_data_all['Date']:
    # print(i,j)
    if i == str(j):
      AAPL_Sentiment_Scores['Open'] = stock_data_all['Open']
      AAPL_Sentiment_Scores['Adjclose'] = stock_data_all['Adjclose']
      AAPL_Sentiment_Scores['High'] = stock_data_all['High']
      AAPL_Sentiment_Scores['Low'] = stock_data_all['Low']
      AAPL_Sentiment_Scores['Close'] = stock_data_all['Close']
      AAPL_Sentiment_Scores['Volume'] = stock_data_all['Volume']   

print('\n\nThe Sentiment Scores Concatenated with the Stock Price Data for Apple\n')
AAPL_Sentiment_Scores = AAPL_Sentiment_Scores.dropna()
AAPL_Sentiment_Scores

import matplotlib.pyplot as plt

fig, (ax1, ax2) = plt.subplots(2, 1, sharex=True, figsize=(10, 8)) 

ax1.plot(AAPL_Sentiment_Scores['Date'], AAPL_Sentiment_Scores['Mean'], color='blue')
ax1.set_yscale('log')
ax1.set_ylabel('Mean Sentiment Score')

ax2.plot(AAPL_Sentiment_Scores['Date'], AAPL_Sentiment_Scores['Adjclose'], color='red')
ax2.set_ylabel('Closing Price')

plt.xlabel('Date')

plt.xticks(rotation='vertical')

plt.show()

"""**For Amazon Inc Ticker**"""

c_name = ['Amazon.com, Inc']
print('\nThe news data available for Amazon for 30 days, and consolidated by news per day is',len(dict_files["Amazon.com, Inc"]),'in number')

# Sentiment Scores for every day data within the directory - 'Amazon Inc'

AMZN_Sentiment_Scores = pd.DataFrame()
for i in c_name:
  AMZN_Sentiment_Scores = AMZN_Sentiment_Scores.append(myread_csv(i))
AMZN_Sentiment_Scores = AMZN_Sentiment_Scores.reset_index(drop=True)
AMZN_Sentiment_Scores.index = AMZN_Sentiment_Scores.index + 1

print('\n\nHere are the Mean Sentiment Polarity Scores for News with respect to Amazon\n')
AMZN_Sentiment_Scores

# importing stock price data from yahoo finance
from yahoo_fin import stock_info as si
import yfinance as yf
import pandas as pd
import os
import matplotlib.pyplot as plt
from datetime import date, timedelta, datetime

# taking the start and end dates as per the news data
start_date = min(AMZN_Sentiment_Scores['Date'])
end_date = max(AMZN_Sentiment_Scores['Date'])

# getting the stock price data for Amazon
ticker = "AMZN"
stock_data_all = si.get_data(ticker, start_date=start_date, end_date=end_date, interval='1d')

# resetting index
stock_data_all = stock_data_all.reset_index()
stock_data_all.index = stock_data_all.index + 1
stock_data_all

# resetting column names and date format
new_column = {'index':'Date', 'open':'Open','high':'High', 'low':'Low','close':'Close','adjclose':'Adjclose','volume':'Volume','ticker':'Ticker'}
stock_data_all = stock_data_all.rename(columns=new_column)
import datetime
for i in stock_data_all['Date']:
  date_obj = i
  date_str = date_obj.strftime('%Y-%m-%d')
  stock_data_all['Date'] = date_str

for i in AMZN_Sentiment_Scores['Date']:
  for j in stock_data_all['Date']:
    # print(i,j)
    if i == str(j):
      AMZN_Sentiment_Scores['Open'] = stock_data_all['Open']
      AMZN_Sentiment_Scores['Adjclose'] = stock_data_all['Adjclose']
      AMZN_Sentiment_Scores['High'] = stock_data_all['High']
      AMZN_Sentiment_Scores['Low'] = stock_data_all['Low']
      AMZN_Sentiment_Scores['Close'] = stock_data_all['Close']
      AMZN_Sentiment_Scores['Volume'] = stock_data_all['Volume']   

print('\n\nThe Sentiment Scores Concatenated with the Stock Price Data for Amazon\n')
AMZN_Sentiment_Scores = AMZN_Sentiment_Scores.dropna()
AMZN_Sentiment_Scores

import matplotlib.pyplot as plt

fig, (ax1, ax2) = plt.subplots(2, 1, sharex=True, figsize=(10, 8)) 

ax1.plot(AMZN_Sentiment_Scores['Date'], AMZN_Sentiment_Scores['Mean'], color='blue')
ax1.set_yscale('log')
ax1.set_ylabel('Mean Sentiment Score')

ax2.plot(AMZN_Sentiment_Scores['Date'], AMZN_Sentiment_Scores['Adjclose'], color='red')
ax2.set_ylabel('Closing Price')

plt.xlabel('Date')

plt.xticks(rotation='vertical')

plt.show()

"""**For Bank of America Corporation Ticker**"""

# for Stock Price Estimation and News related to Apple, limiting the company list to two - Apple Inc and Apple Inc_
c_name = ['Bank of America Corporation']
print('\nThe news data available for Bank of America for 30 days, and consolidated by news per company is',len(dict_files['Bank of America Corporation']), 'in number')

# Sentiment Scores for every day data within the directory - 'Bank of America Corporation'

BAC_Sentiment_Scores = pd.DataFrame()
for i in c_name:
  BAC_Sentiment_Scores = BAC_Sentiment_Scores.append(myread_csv(i))
BAC_Sentiment_Scores = BAC_Sentiment_Scores.reset_index(drop=True)
BAC_Sentiment_Scores.index = BAC_Sentiment_Scores.index + 1

print('\n\nHere are the Mean Sentiment Polarity Scores for News with respect to Bank of America\n')
BAC_Sentiment_Scores

# importing stock price data from yahoo finance
from yahoo_fin import stock_info as si
import yfinance as yf
import pandas as pd
import os
import matplotlib.pyplot as plt
from datetime import date, timedelta, datetime

# taking the start and end dates as per the news data
start_date = min(BAC_Sentiment_Scores['Date'])
end_date = max(BAC_Sentiment_Scores['Date'])

# getting the stock price data for Bank of America
ticker = "BAC"
stock_data_all = si.get_data(ticker, start_date=start_date, end_date=end_date, interval='1d')

# resetting index
stock_data_all = stock_data_all.reset_index()
stock_data_all.index = stock_data_all.index + 1
stock_data_all

# resetting column names and date format
new_column = {'index':'Date', 'open':'Open','high':'High', 'low':'Low','close':'Close','adjclose':'Adjclose','volume':'Volume','ticker':'Ticker'}
stock_data_all = stock_data_all.rename(columns=new_column)
import datetime
for i in stock_data_all['Date']:
  date_obj = i
  date_str = date_obj.strftime('%Y-%m-%d')
  stock_data_all['Date'] = date_str

for i in BAC_Sentiment_Scores['Date']:
  for j in stock_data_all['Date']:
    # print(i,j)
    if i == str(j):
      BAC_Sentiment_Scores['Open'] = stock_data_all['Open']
      BAC_Sentiment_Scores['Adjclose'] = stock_data_all['Adjclose']
      BAC_Sentiment_Scores['High'] = stock_data_all['High']
      BAC_Sentiment_Scores['Low'] = stock_data_all['Low']
      BAC_Sentiment_Scores['Close'] = stock_data_all['Close']
      BAC_Sentiment_Scores['Volume'] = stock_data_all['Volume']   

print('\n\nThe Sentiment Scores Concatenated with the Stock Price Data for Bank of America\n')
BAC_Sentiment_Scores = BAC_Sentiment_Scores.dropna()
BAC_Sentiment_Scores

import matplotlib.pyplot as plt

fig, (ax1, ax2) = plt.subplots(2, 1, sharex=True, figsize=(10, 8)) 

ax1.plot(BAC_Sentiment_Scores['Date'], BAC_Sentiment_Scores['Mean'], color='blue')
ax1.set_yscale('log')
ax1.set_ylabel('Mean Sentiment Score')

ax2.plot(BAC_Sentiment_Scores['Date'], BAC_Sentiment_Scores['Adjclose'], color='red')
ax2.set_ylabel('Closing Price')

plt.xlabel('Date')

plt.xticks(rotation='vertical')

plt.show()

"""**For Best Buy Co., Inc Ticker**"""

# for Stock Price Estimation and News related to Apple, limiting the company list to two - Apple Inc and Apple Inc_
c_name = ['Best Buy Co., Inc']
print('\nThe news data available for Best Buy for 30 days, and consolidated by news per company is',len(dict_files['Best Buy Co., Inc']), 'in number')

# Sentiment Scores for every day data within the directory - 'Best Buy Co., Inc'

BBY_Sentiment_Scores = pd.DataFrame()
for i in c_name:
  BBY_Sentiment_Scores = BBY_Sentiment_Scores.append(myread_csv(i))
BBY_Sentiment_Scores = BBY_Sentiment_Scores.reset_index(drop=True)
BBY_Sentiment_Scores.index = BBY_Sentiment_Scores.index + 1

print('\n\nHere are the Mean Sentiment Polarity Scores for News with respect to Best Buy \n')
BBY_Sentiment_Scores

# importing stock price data from yahoo finance
from yahoo_fin import stock_info as si
import yfinance as yf
import pandas as pd
import os
import matplotlib.pyplot as plt
from datetime import date, timedelta, datetime

# taking the start and end dates as per the news data
start_date = min(BBY_Sentiment_Scores['Date'])
end_date = max(BBY_Sentiment_Scores['Date'])

# getting the stock price data for Apple
ticker = "BBY"
stock_data_all = si.get_data(ticker, start_date=start_date, end_date=end_date, interval='1d')

# resetting index
stock_data_all = stock_data_all.reset_index()
stock_data_all.index = stock_data_all.index + 1
stock_data_all

# resetting column names and date format
new_column = {'index':'Date', 'open':'Open','high':'High', 'low':'Low','close':'Close','adjclose':'Adjclose','volume':'Volume','ticker':'Ticker'}
stock_data_all = stock_data_all.rename(columns=new_column)
import datetime
for i in stock_data_all['Date']:
  date_obj = i
  date_str = date_obj.strftime('%Y-%m-%d')
  stock_data_all['Date'] = date_str

for i in BBY_Sentiment_Scores['Date']:
  for j in stock_data_all['Date']:
    # print(i,j)
    if i == str(j):
      BBY_Sentiment_Scores['Open'] = stock_data_all['Open']
      BBY_Sentiment_Scores['Adjclose'] = stock_data_all['Adjclose']
      BBY_Sentiment_Scores['High'] = stock_data_all['High']
      BBY_Sentiment_Scores['Low'] = stock_data_all['Low']
      BBY_Sentiment_Scores['Close'] = stock_data_all['Close']
      BBY_Sentiment_Scores['Volume'] = stock_data_all['Volume']   

print('\n\nThe Sentiment Scores Concatenated with the Stock Price Data for Best Buy \n')
BBY_Sentiment_Scores = BBY_Sentiment_Scores.dropna()
BBY_Sentiment_Scores

import matplotlib.pyplot as plt

fig, (ax1, ax2) = plt.subplots(2, 1, sharex=True, figsize=(10, 8)) 

ax1.plot(BBY_Sentiment_Scores['Date'], BBY_Sentiment_Scores['Mean'], color='blue')
ax1.set_yscale('log')
ax1.set_ylabel('Mean Sentiment Score')

ax2.plot(BBY_Sentiment_Scores['Date'], BBY_Sentiment_Scores['Adjclose'], color='red')
ax2.set_ylabel('Closing Price')

plt.xlabel('Date')

plt.xticks(rotation='vertical')

plt.show()

"""**For The Boeing Company Ticker**"""

c_name = ['Amazon.com, Inc']
print('\nThe news data available for The Boeing Company for 30 days, and consolidated by news per day is',len(dict_files["The Boeing Company"]),'in number')

# Sentiment Scores for every day data within the directory - 'The Boeing Company'

BA_Sentiment_Scores = pd.DataFrame()
for i in c_name:
  BA_Sentiment_Scores = BA_Sentiment_Scores.append(myread_csv(i))
BA_Sentiment_Scores = BA_Sentiment_Scores.reset_index(drop=True)
BA_Sentiment_Scores.index = BA_Sentiment_Scores.index + 1

print('\n\nHere are the Mean Sentiment Polarity Scores for News with respect to The Boeing Company\n')
BA_Sentiment_Scores

# importing stock price data from yahoo finance
from yahoo_fin import stock_info as si
import yfinance as yf
import pandas as pd
import os
import matplotlib.pyplot as plt
from datetime import date, timedelta, datetime

# taking the start and end dates as per the news data
start_date = min(BA_Sentiment_Scores['Date'])
end_date = max(BA_Sentiment_Scores['Date'])

# getting the stock price data for The Boeing Company
ticker = "BA"
stock_data_all = si.get_data(ticker, start_date=start_date, end_date=end_date, interval='1d')

# resetting index
stock_data_all = stock_data_all.reset_index()
stock_data_all.index = stock_data_all.index + 1
stock_data_all

# resetting column names and date format
new_column = {'index':'Date', 'open':'Open','high':'High', 'low':'Low','close':'Close','adjclose':'Adjclose','volume':'Volume','ticker':'Ticker'}
stock_data_all = stock_data_all.rename(columns=new_column)
import datetime
for i in stock_data_all['Date']:
  date_obj = i
  date_str = date_obj.strftime('%Y-%m-%d')
  stock_data_all['Date'] = date_str

for i in BA_Sentiment_Scores['Date']:
  for j in stock_data_all['Date']:
    # print(i,j)
    if i == str(j):
      BA_Sentiment_Scores['Open'] = stock_data_all['Open']
      BA_Sentiment_Scores['Adjclose'] = stock_data_all['Adjclose']
      BA_Sentiment_Scores['High'] = stock_data_all['High']
      BA_Sentiment_Scores['Low'] = stock_data_all['Low']
      BA_Sentiment_Scores['Close'] = stock_data_all['Close']
      BA_Sentiment_Scores['Volume'] = stock_data_all['Volume']   

print('\n\nThe Sentiment Scores Concatenated with the Stock Price Data for The Boeing Company \n')
BA_Sentiment_Scores = BA_Sentiment_Scores.dropna()
BA_Sentiment_Scores

import matplotlib.pyplot as plt

fig, (ax1, ax2) = plt.subplots(2, 1, sharex=True, figsize=(10, 8)) 

ax1.plot(BA_Sentiment_Scores['Date'], BA_Sentiment_Scores['Mean'], color='blue')
ax1.set_yscale('log')
ax1.set_ylabel('Mean Sentiment Score')

ax2.plot(BA_Sentiment_Scores['Date'], BA_Sentiment_Scores['Adjclose'], color='red')
ax2.set_ylabel('Closing Price')

plt.xlabel('Date')

plt.xticks(rotation='vertical')

plt.show()

"""Using these three company news and stock price data, let us now create a classification algorithm based on the obtained Sentiment Scores and their respective opening and closing prices. 

The aim of the classification model is to predict that given the Sentiment Score and the Opening Value, if we can predict the stock price to close at higher (bullish) or lower (bearish) value.
"""

# to concatenate all the three dataframes into one and preprocess it

df = pd.concat([AAPL_Sentiment_Scores, AMZN_Sentiment_Scores, BAC_Sentiment_Scores, BBY_Sentiment_Scores, BA_Sentiment_Scores])

df.shape

"""To convert this dataframe suitable for running classification models, converting the Adjclose column to target based on the difference in the opening and closing price and dropping the close column"""

df['Difference'] = df['Adjclose'] - df['Open'] # Shows the difference between the opening and closing price values
# df['Output'] = df['Difference'].apply(lambda x: 'Positive' if x > 0 else 'Negative')
df['Volatility'] = df['High'] - df['Low'] # Shows the voltatility of the stock for the day, difference between high and low
df['Max_Peak_of_the_day'] = df['High'] - df['Open'] # Shows the difference between the highest price of the day and the opening price of the day
df['Max_Dip_of_the_day'] = df['Open'] - df['Low'] # Shows the difference between the opening price of the day and the lowest price of the day 
df.head()

df = df.drop(['Adjclose','Close','Date'], axis = 1)

df.head()

df.isna().sum()

from sklearn.preprocessing import MinMaxScaler
import pandas as pd

scaler = MinMaxScaler()
volume = df['Volume'].values.reshape(-1, 1)
normalized_volume = scaler.fit_transform(volume)

df['Normalized_Volume'] = normalized_volume

df.head()

df = df.drop('Volume', axis = 1)

from sklearn.cluster import KMeans
import pandas as pd

kmeans = KMeans(n_clusters=5, random_state=42)

kmeans.fit(df)

labels = kmeans.labels_

data_with_clusters = df.copy()
data_with_clusters['Cluster'] = labels

data_with_clusters

from sklearn import cluster
import numpy as np

sse = []
krange = list(range(2,8))
X = df.values
for n in krange:
    model = cluster.KMeans(n_clusters=n, random_state=3)
    model.fit_predict(X)
    cluster_assignments = model.labels_
    centers = model.cluster_centers_
    sse.append(np.sum((X - centers[cluster_assignments]) ** 2))

plt.plot(krange, sse)
plt.xlabel("$K$")
plt.ylabel("Sum of Squares")
plt.show()

kmeans = KMeans(n_clusters=4).fit(df)

data_with_clusters['Cluster'] = kmeans.labels_

data_with_clusters

cluster1_metrics = kmeans.cluster_centers_[0]
cluster2_metrics = kmeans.cluster_centers_[1]
cluster3_metrics = kmeans.cluster_centers_[2]
cluster4_metrics = kmeans.cluster_centers_[3]

data = [cluster1_metrics, cluster2_metrics, cluster3_metrics, cluster4_metrics]
cluster_center_df = pd.DataFrame(data)

cluster_center_df.columns = data_with_clusters.columns[:-1]
cluster_center_df

plt.scatter(
    data_with_clusters.loc[data_with_clusters['Cluster'] == 0]['Mean'], 
    data_with_clusters.loc[data_with_clusters['Cluster'] == 0]['Normalized_Volume'],
    c='blue')

plt.scatter(
    data_with_clusters.loc[data_with_clusters['Cluster'] == 1]['Mean'], 
    data_with_clusters.loc[data_with_clusters['Cluster'] == 1]['Normalized_Volume'],
    c='red')

plt.scatter(
    data_with_clusters.loc[data_with_clusters['Cluster'] == 2]['Mean'], 
    data_with_clusters.loc[data_with_clusters['Cluster'] == 2]['Normalized_Volume'],
    c='orange')

plt.scatter(
    data_with_clusters.loc[data_with_clusters['Cluster'] == 3]['Mean'], 
    data_with_clusters.loc[data_with_clusters['Cluster'] == 3]['Normalized_Volume'],
    c='green')


plt.title('Normalized_Volume vs. Mean Clusters')
plt.xlabel('Mean')
plt.ylabel('Normalized_Volume')

plt.grid()
plt.show()

plt.scatter(
    data_with_clusters.loc[data_with_clusters['Cluster'] == 0]['Mean'], 
    data_with_clusters.loc[data_with_clusters['Cluster'] == 0]['Max_Peak_of_the_day'],
    c='blue')

plt.scatter(
    data_with_clusters.loc[data_with_clusters['Cluster'] == 1]['Mean'], 
    data_with_clusters.loc[data_with_clusters['Cluster'] == 1]['Max_Peak_of_the_day'],
    c='red')

plt.scatter(
    data_with_clusters.loc[data_with_clusters['Cluster'] == 2]['Mean'], 
    data_with_clusters.loc[data_with_clusters['Cluster'] == 2]['Max_Peak_of_the_day'],
    c='orange')

plt.scatter(
    data_with_clusters.loc[data_with_clusters['Cluster'] == 3]['Mean'], 
    data_with_clusters.loc[data_with_clusters['Cluster'] == 3]['Max_Peak_of_the_day'],
    c='green')


plt.title('Max_Peak_of_the_day vs. Mean Clusters')
plt.xlabel('Mean')
plt.ylabel('Max_Peak_of_the_day')

plt.grid()
plt.show()

plt.scatter(
    data_with_clusters.loc[data_with_clusters['Cluster'] == 0]['Mean'], 
    data_with_clusters.loc[data_with_clusters['Cluster'] == 0]['Max_Dip_of_the_day'],
    c='blue')

plt.scatter(
    data_with_clusters.loc[data_with_clusters['Cluster'] == 1]['Mean'], 
    data_with_clusters.loc[data_with_clusters['Cluster'] == 1]['Max_Dip_of_the_day'],
    c='red')

plt.scatter(
    data_with_clusters.loc[data_with_clusters['Cluster'] == 2]['Mean'], 
    data_with_clusters.loc[data_with_clusters['Cluster'] == 2]['Max_Dip_of_the_day'],
    c='orange')

plt.scatter(
    data_with_clusters.loc[data_with_clusters['Cluster'] == 3]['Mean'], 
    data_with_clusters.loc[data_with_clusters['Cluster'] == 3]['Max_Dip_of_the_day'],
    c='green')


plt.title('Max_Dip_of_the_day vs. Mean Clusters')
plt.xlabel('Mean')
plt.ylabel('Max_Dip_of_the_day')

plt.grid()
plt.show()

plt.scatter(
    data_with_clusters.loc[data_with_clusters['Cluster'] == 0]['Mean'], 
    data_with_clusters.loc[data_with_clusters['Cluster'] == 0]['Volatility'],
    c='blue')

plt.scatter(
    data_with_clusters.loc[data_with_clusters['Cluster'] == 1]['Mean'], 
    data_with_clusters.loc[data_with_clusters['Cluster'] == 1]['Volatility'],
    c='red')

plt.scatter(
    data_with_clusters.loc[data_with_clusters['Cluster'] == 2]['Mean'], 
    data_with_clusters.loc[data_with_clusters['Cluster'] == 2]['Volatility'],
    c='orange')

plt.scatter(
    data_with_clusters.loc[data_with_clusters['Cluster'] == 3]['Mean'], 
    data_with_clusters.loc[data_with_clusters['Cluster'] == 3]['Volatility'],
    c='green')


plt.title('Volatility vs. Mean Clusters')
plt.xlabel('Mean')
plt.ylabel('Volatility')

plt.grid()
plt.show()

plt.scatter(
    data_with_clusters.loc[data_with_clusters['Cluster'] == 0]['Mean'], 
    data_with_clusters.loc[data_with_clusters['Cluster'] == 0]['Difference'],
    c='blue')

plt.scatter(
    data_with_clusters.loc[data_with_clusters['Cluster'] == 1]['Mean'], 
    data_with_clusters.loc[data_with_clusters['Cluster'] == 1]['Difference'],
    c='red')

plt.scatter(
    data_with_clusters.loc[data_with_clusters['Cluster'] == 2]['Mean'], 
    data_with_clusters.loc[data_with_clusters['Cluster'] == 2]['Difference'],
    c='orange')

plt.scatter(
    data_with_clusters.loc[data_with_clusters['Cluster'] == 3]['Mean'], 
    data_with_clusters.loc[data_with_clusters['Cluster'] == 3]['Difference'],
    c='green')


plt.title('Difference vs. Mean Clusters')
plt.xlabel('Mean')
plt.ylabel('Difference')

plt.grid()
plt.show()